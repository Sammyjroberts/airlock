// Code generated by airlock; DO NOT EDIT.
package main

import (
	"fmt"
)

type MathCaller struct {
	proxyBase
}

func NewMathCaller(sockPath string) *MathCaller {
	return &MathCaller{
		proxyBase: proxyBase{sockPath: sockPath},
	}
}

func (c *MathCaller) Add(arg0 int, arg1 int) (int, error) {
	result, err := c.call("Add", arg0, arg1)
	if err != nil {
		return 0, err
	}

	typedResult, ok := result.(int)
	if !ok {
		return 0, fmt.Errorf("unexpected result type: %T", result)
	}
	return typedResult, nil

}

func (c *MathCaller) Subtract(arg0 int, arg1 int) (int, error) {
	result, err := c.call("Subtract", arg0, arg1)
	if err != nil {
		return 0, err
	}

	typedResult, ok := result.(int)
	if !ok {
		return 0, fmt.Errorf("unexpected result type: %T", result)
	}
	return typedResult, nil

}

func (c *MathCaller) Multiply(arg0 int, arg1 int) (int, error) {
	result, err := c.call("Multiply", arg0, arg1)
	if err != nil {
		return 0, err
	}

	typedResult, ok := result.(int)
	if !ok {
		return 0, fmt.Errorf("unexpected result type: %T", result)
	}
	return typedResult, nil

}

func (c *MathCaller) Divide(arg0 int, arg1 int) (int, error) {
	result, err := c.call("Divide", arg0, arg1)
	if err != nil {
		return 0, err
	}

	typedResult, ok := result.(int)
	if !ok {
		return 0, fmt.Errorf("unexpected result type: %T", result)
	}
	return typedResult, nil

}
